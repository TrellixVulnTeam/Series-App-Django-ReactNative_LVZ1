{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/lusk/Documents/projetos/Series App/SeriesApp/src/pages/LoginPage.js\";\n\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\nimport LoginHeader from \"../components/Headers/LoginHeader\";\nimport FormLogin from \"../components/Forms/FormLogin\";\nimport ButtonLogin from \"../components/Buttons/ButtonLogin\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport store from \"../store/store\";\nimport APIServices from \"../APIServices/APIServices\";\nimport { TokenSet } from \"../store/counterslice\";\nimport Colors_services from \"../utils/Colors_layout\";\n\nvar LoginPage = function LoginPage(props) {\n  var navigation = props.navigation;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      error_message = _useState6[0],\n      setMessage = _useState6[1];\n\n  var dispatch = useDispatch();\n\n  var OnPress_SingIn = function OnPress_SingIn(obj_user) {\n    setLoading(true);\n    APIServices.AuthUser(obj_user).then(function (response) {\n      dispatch(TokenSet({\n        type: \"token_set\",\n        payload: response.data.token\n      }));\n      setLoading(false);\n      setError(false);\n    }).catch(function (error) {\n      setLoading(false);\n      setError(true);\n      setMessage(error.response.data.non_field_errors);\n    });\n  };\n\n  var Render_handling_login = function Render_handling_login() {\n    if (loading) {\n      return React.createElement(View, {\n        style: style.viewStyle,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 17\n        }\n      }, React.createElement(ActivityIndicator, {\n        size: \"large\",\n        color: Colors_services.Get_ColorsPack()[\"Roxo_escuro\"],\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }\n      }));\n    } else {\n      return React.createElement(KeyboardAwareScrollView, {\n        keyboardShouldPersistTaps: 'always',\n        contentContainerStyle: style.container,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }\n      }, React.createElement(LoginHeader, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }\n      }), React.createElement(FormLogin, {\n        error: error,\n        error_message: error_message,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }\n      }), React.createElement(ButtonLogin, {\n        navigation: navigation,\n        OnPress_SingIn: OnPress_SingIn,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }\n      }));\n    }\n  };\n\n  return React.createElement(View, {\n    style: {\n      flexGrow: 1\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, Render_handling_login());\n};\n\nvar style = StyleSheet.create({\n  container: {\n    padding: 20,\n    backgroundColor: 'white',\n    flexShrink: 0,\n    flexGrow: 1\n  },\n  viewStyle: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'white'\n  }\n});\nexport default LoginPage;","map":{"version":3,"sources":["/home/lusk/Documents/projetos/Series App/SeriesApp/src/pages/LoginPage.js"],"names":["React","useState","KeyboardAwareScrollView","LoginHeader","FormLogin","ButtonLogin","useSelector","useDispatch","store","APIServices","TokenSet","Colors_services","LoginPage","props","navigation","error","setError","loading","setLoading","error_message","setMessage","dispatch","OnPress_SingIn","obj_user","AuthUser","then","response","type","payload","data","token","catch","non_field_errors","Render_handling_login","style","viewStyle","Get_ColorsPack","container","flexGrow","StyleSheet","create","padding","backgroundColor","flexShrink","flex","justifyContent","alignItems"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { View, Text, StyleSheet, ActivityIndicator } from 'react-native';\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\nimport LoginHeader from '../components/Headers/LoginHeader';\nimport FormLogin from '../components/Forms/FormLogin';\nimport ButtonLogin from '../components/Buttons/ButtonLogin';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport store from '../store/store';\n\nimport APIServices from '../APIServices/APIServices';\nimport { TokenSet } from '../store/counterslice';\nimport Colors_services from '../utils/Colors_layout';\n\nconst LoginPage = (props) => {\n    const { navigation } = props;\n\n    const [ error, setError ] = useState(\"\");\n    const [ loading, setLoading ] = useState(false);\n    const [ error_message, setMessage ] = useState(\"\");\n\n    const dispatch = useDispatch();\n\n    const OnPress_SingIn = (obj_user) => {\n        setLoading(true);\n        APIServices.AuthUser(obj_user).then(response => {\n            dispatch(TokenSet({type:\"token_set\",payload:response.data.token}));\n            setLoading(false);\n            setError(false);\n        })\n        .catch((error) => {\n            setLoading(false);\n            setError(true);\n            setMessage(error.response.data.non_field_errors);\n        })\n    }\n\n    const Render_handling_login = () => {\n        if (loading){\n            return(\n                <View style={style.viewStyle}> \n                    <ActivityIndicator size=\"large\" color={Colors_services.Get_ColorsPack()[\"Roxo_escuro\"]} />\n                </View>\n            );\n        }\n        else{\n            return(\n                <KeyboardAwareScrollView keyboardShouldPersistTaps={'always'}\n                    contentContainerStyle={style.container}>\n                    <LoginHeader />\n                    <FormLogin error={error} error_message={error_message}/>\n                    <ButtonLogin navigation={navigation} OnPress_SingIn={OnPress_SingIn} />\n                </KeyboardAwareScrollView>\n            );\n        }\n    }\n\n    return (\n        <View style={{flexGrow:1}}>\n            {Render_handling_login()}\n        </View>\n    );\n}\n\nconst style = StyleSheet.create({\n    container:{\n        padding: 20,\n        backgroundColor: 'white',\n        flexShrink: 0,\n        flexGrow: 1\n    },\n    viewStyle:{\n        flex: 1,\n        justifyContent:'center',\n        alignItems: 'center',\n        backgroundColor: 'white'\n    }\n})\n\nexport default LoginPage;"]},"metadata":{},"sourceType":"module"}