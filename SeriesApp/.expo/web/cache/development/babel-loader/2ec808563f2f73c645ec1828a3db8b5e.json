{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/lusk/Documents/projetos/Series App/SeriesApp/src/components/Grid/ListSeries.js\";\nimport React, { useEffect, useState } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport SerieContainer from \"../Itens/SerieContainer\";\nexport var row = 2;\nexport default function ListSeries(props) {\n  var _this = this;\n\n  var series = props.series;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      DATA = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      FakeDATA = _useState4[0],\n      setFakeData = _useState4[1];\n\n  var fill_series = function fill_series() {\n    var lines = parseInt(DATA.length / row) + 1;\n    var qtd_serie_population = DATA.length;\n    var max_serie_population = row * lines;\n    console.log(DATA, max_serie_population, qtd_serie_population);\n\n    for (var i = 0; i < max_serie_population - qtd_serie_population; i++) {\n      var new_data = [].concat(_toConsumableArray(DATA), [{\n        title: 'teste',\n        description: 'teste'\n      }]);\n      setFakeData(new_data);\n    }\n  };\n\n  useEffect(function () {\n    if (series !== undefined) {\n      setData(series.payload);\n      fill_series();\n    }\n  }, [series]);\n  return React.createElement(View, {\n    style: style.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, DATA.length !== 0 ? React.createElement(FlatList, {\n    style: style.container,\n    contentContainerStyle: style.containerList,\n    data: DATA,\n    numColumns: row,\n    renderItem: function renderItem(item) {\n      return React.createElement(SerieContainer, {\n        serie: item,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 47\n        }\n      });\n    },\n    keyExtractor: function keyExtractor(item) {\n      return item.id;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 34\n    }\n  }) : null);\n}\nvar style = StyleSheet.create({\n  listContainer: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  container: {\n    flex: 1\n  },\n  containerList: {\n    marginHorizontal: 15\n  }\n});","map":{"version":3,"sources":["/home/lusk/Documents/projetos/Series App/SeriesApp/src/components/Grid/ListSeries.js"],"names":["React","useEffect","useState","SerieContainer","row","ListSeries","props","series","DATA","setData","FakeDATA","setFakeData","fill_series","lines","parseInt","length","qtd_serie_population","max_serie_population","console","log","i","new_data","title","description","undefined","payload","style","container","containerList","item","id","StyleSheet","create","listContainer","justifyContent","alignItems","flex","marginHorizontal"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;;;;;;AAIA,OAAOC,cAAP;AAEA,OAAO,IAAMC,GAAG,GAAG,CAAZ;AAEP,eAAe,SAASC,UAAT,CAAqBC,KAArB,EAA2B;AAAA;;AAEtC,MAAQC,MAAR,GAAmBD,KAAnB,CAAQC,MAAR;;AACA,kBAAwBL,QAAQ,CAAC,EAAD,CAAhC;AAAA;AAAA,MAAOM,IAAP;AAAA,MAAaC,OAAb;;AACA,mBAAgCP,QAAQ,CAAC,EAAD,CAAxC;AAAA;AAAA,MAAOQ,QAAP;AAAA,MAAiBC,WAAjB;;AAEA,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACtB,QAAMC,KAAK,GAAGC,QAAQ,CAACN,IAAI,CAACO,MAAL,GAAcX,GAAf,CAAR,GAA8B,CAA5C;AACA,QAAMY,oBAAoB,GAAGR,IAAI,CAACO,MAAlC;AACA,QAAME,oBAAoB,GAAGb,GAAG,GAAGS,KAAnC;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYX,IAAZ,EAAkBS,oBAAlB,EAAwCD,oBAAxC;;AAEA,SAAK,IAAII,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAGH,oBAAoB,GAAGD,oBAAzC,EAA+DI,CAAC,EAAhE,EAAmE;AAC/D,UAAMC,QAAQ,gCAAOb,IAAP,IAAa;AAACc,QAAAA,KAAK,EAAC,OAAP;AAAeC,QAAAA,WAAW,EAAC;AAA3B,OAAb,EAAd;AACAZ,MAAAA,WAAW,CAACU,QAAD,CAAX;AACH;AACJ,GAVD;;AAYApB,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIM,MAAM,KAAKiB,SAAf,EAAyB;AACrBf,MAAAA,OAAO,CAACF,MAAM,CAACkB,OAAR,CAAP;AACAb,MAAAA,WAAW;AACd;AACJ,GALQ,EAKN,CAACL,MAAD,CALM,CAAT;AAOA,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEmB,KAAK,CAACC,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKnB,IAAI,CAACO,MAAL,KAAgB,CAAhB,GAAoB,oBAAC,QAAD;AACjB,IAAA,KAAK,EAAEW,KAAK,CAACC,SADI;AAEjB,IAAA,qBAAqB,EAAED,KAAK,CAACE,aAFZ;AAGjB,IAAA,IAAI,EAAEpB,IAHW;AAIjB,IAAA,UAAU,EAAEJ,GAJK;AAKjB,IAAA,UAAU,EAAE,oBAACyB,IAAD,EAAU;AAAC,aAAO,oBAAC,cAAD;AAAgB,QAAA,KAAK,EAAEA,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAAuC,KAL7C;AAMjB,IAAA,YAAY,EAAE,sBAACA,IAAD;AAAA,aAAUA,IAAI,CAACC,EAAf;AAAA,KANG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAApB,GAOI,IART,CADJ;AAYH;AAED,IAAMJ,KAAK,GAAGK,UAAU,CAACC,MAAX,CAAkB;AAC5BC,EAAAA,aAAa,EAAC;AACVC,IAAAA,cAAc,EAAC,QADL;AAEVC,IAAAA,UAAU,EAAC;AAFD,GADc;AAK5BR,EAAAA,SAAS,EAAC;AACNS,IAAAA,IAAI,EAAE;AADA,GALkB;AAQ5BR,EAAAA,aAAa,EAAC;AACVS,IAAAA,gBAAgB,EAAE;AADR;AARc,CAAlB,CAAd","sourcesContent":["import React, {useEffect, useState} from 'react';\n\nimport { FlatList, View, Text, StyleSheet, Dimensions } from 'react-native';\n\nimport SerieContainer from '../Itens/SerieContainer';\n\nexport const row = 2;\n\nexport default function ListSeries (props){\n\n    const { series } = props;\n    const [DATA, setData] = useState([]);\n    const [FakeDATA, setFakeData] = useState([])\n\n    const fill_series = () => {\n        const lines = parseInt(DATA.length / row) + 1;\n        const qtd_serie_population = DATA.length;\n        const max_serie_population = row * lines;\n        console.log(DATA, max_serie_population, qtd_serie_population);\n        \n        for( var i=0; i < max_serie_population - qtd_serie_population; i++){\n            const new_data = [...DATA, {title:'teste',description:'teste'}];\n            setFakeData(new_data);\n        }\n    }\n\n    useEffect(() => {\n        if (series !== undefined){\n            setData(series.payload);\n            fill_series();\n        }\n    }, [series])\n\n    return(\n        <View style={style.container}>\n            {DATA.length !== 0 ? <FlatList \n                style={style.container}\n                contentContainerStyle={style.containerList}\n                data={DATA}\n                numColumns={row}\n                renderItem={(item) => {return <SerieContainer serie={item} />}}\n                keyExtractor={(item) => item.id}\n            /> : null}\n        </View>\n    )\n} \n\nconst style = StyleSheet.create({\n    listContainer:{\n        justifyContent:'center',\n        alignItems:'center',\n    },\n    container:{\n        flex: 1,\n    },\n    containerList:{\n        marginHorizontal: 15,\n    }\n})"]},"metadata":{},"sourceType":"module"}