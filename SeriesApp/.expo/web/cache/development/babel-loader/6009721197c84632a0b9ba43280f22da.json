{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport React from 'react';\nimport axios from 'axios';\nimport { getStateFromPath, Link } from '@react-navigation/native';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport var Server_link = 'https://miketrctw.pythonanywhere.com/api/';\nexport var Server_linkMain = 'https://miketrctw.pythonanywhere.com';\n\nvar APIServices = function () {\n  function APIServices() {\n    _classCallCheck(this, APIServices);\n  }\n\n  _createClass(APIServices, null, [{\n    key: \"AuthUser\",\n    value: function AuthUser(obj_user) {\n      var Link_auth = Server_link + 'auth/';\n      return axios.post(Link_auth, obj_user);\n    }\n  }, {\n    key: \"SingupUser\",\n    value: function SingupUser(obj_user) {\n      var Link_auth = Server_link + 'singup/';\n      console.log(Link_auth);\n      return axios.post(Link_auth, obj_user);\n    }\n  }, {\n    key: \"ListSeries\",\n    value: function ListSeries(token) {\n      var Link_auth = Server_link + 'series/';\n      return axios.get(Link_auth, {\n        headers: {\n          Authorization: \"Token \" + token.payload\n        }\n      });\n    }\n  }, {\n    key: \"ListSeries_page\",\n    value: function ListSeries_page(token, limit1, limit2) {\n      var Link_auth = Server_link + (\"series/pagination/\" + limit1 + \"=\" + limit2);\n      console.log(token);\n      return axios.get(Link_auth, {\n        headers: {\n          Authorization: \"Token \" + token.payload\n        }\n      });\n    }\n  }, {\n    key: \"DetailSeries\",\n    value: function DetailSeries(token, id, action) {\n      var Link_auth = Server_link + (\"series/detail=\" + id);\n\n      switch (action.type) {\n        case 'DELETE':\n          return axios.delete(Link_auth, {\n            headers: {\n              Authorization: \"Token \" + token.payload\n            }\n          });\n\n        case 'UPDATE':\n          var obj_updateParam = Object.assign({\n            headers: {\n              Authorization: \"Token \" + token.payload\n            }\n          }, action.payload);\n          return axios.put(Link_auth, obj_updateParam);\n\n        case 'GET':\n          return axios.get(Link_auth, {\n            headers: {\n              Authorization: \"Token \" + token.payload\n            }\n          });\n      }\n    }\n  }, {\n    key: \"PostSerie\",\n    value: function PostSerie(token, obj_json, imageUrl) {\n      var imageUri = imageUrl.payload.image;\n      var image = {\n        uri: Platform.OS === \"android\" ? imageUri.uri : imageUri.uri.replace(\"file://\", \"\"),\n        type: \"image/jpeg\",\n        name: 'imagem'\n      };\n      var form = new FormData();\n      form.append(\"title\", obj_json.title);\n      form.append(\"note\", obj_json.note);\n      form.append(\"description\", obj_json.description);\n      form.append('img_series', image);\n      var url_link = Server_link + 'series/';\n      return axios.post(url_link, form, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          'Authorization': \"Token \" + token,\n          'Accept': 'application/json'\n        }\n      });\n    }\n  }]);\n\n  return APIServices;\n}();\n\nexport { APIServices as default };","map":{"version":3,"sources":["/home/lusk/Documents/projetos/Series App/SeriesApp/src/APIServices/APIServices.js"],"names":["React","axios","getStateFromPath","Link","Server_link","Server_linkMain","APIServices","obj_user","Link_auth","post","console","log","token","get","headers","Authorization","payload","limit1","limit2","id","action","type","delete","obj_updateParam","Object","assign","put","obj_json","imageUrl","imageUri","image","uri","Platform","OS","replace","name","form","FormData","append","title","note","description","url_link"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport { getStateFromPath, Link } from '@react-navigation/native';\nimport { Platform } from 'react-native';\n\nexport const Server_link = 'https://miketrctw.pythonanywhere.com/api/';\n\nexport const Server_linkMain = 'https://miketrctw.pythonanywhere.com'\n\nexport default class APIServices{\n     \n    static AuthUser(obj_user){\n        let Link_auth = Server_link + 'auth/';\n        \n        return axios.post(Link_auth, obj_user);\n    }\n\n    static SingupUser(obj_user){\n        let Link_auth = Server_link + 'singup/';\n        console.log(Link_auth);\n        return axios.post(Link_auth, obj_user);\n    }\n    \n    static ListSeries(token){\n        let Link_auth = Server_link + 'series/';\n\n        return axios.get(Link_auth , {\n            headers:{Authorization: `Token ${token.payload}`},\n        });\n    }\n\n    static ListSeries_page(token, limit1, limit2){\n        let Link_auth = Server_link + `series/pagination/${limit1}=${limit2}`;\n        console.log(token);\n        return axios.get(Link_auth , {\n            headers:{Authorization: `Token ${token.payload}`},\n        });\n    }\n\n    static DetailSeries(token, id, action){\n        let Link_auth = Server_link + `series/detail=${id}`;\n\n        switch (action.type){\n            case 'DELETE':\n                return axios.delete(Link_auth, {\n                    headers:{Authorization: `Token ${token.payload}`},\n                })\n\n            case 'UPDATE':\n                const obj_updateParam = Object.assign({headers:{Authorization: `Token ${token.payload}`}}, action.payload);\n                return axios.put(Link_auth, obj_updateParam);\n\n            case 'GET':\n                return axios.get(Link_auth, {\n                    headers:{Authorization: `Token ${token.payload}`},\n                });\n        }\n    }\n\n    static PostSerie(token, obj_json, imageUrl){\n        var imageUri = imageUrl.payload.image;\n       \n        var image = {\n            uri: Platform.OS === \"android\" ? imageUri.uri : imageUri.uri.replace(\"file://\", \"\"),\n            type: `image/jpeg`, \n            name: 'imagem'\n        }\n\n        var form = new FormData();\n        form.append(\"title\", obj_json.title);\n        form.append(\"note\", obj_json.note);\n        form.append(\"description\", obj_json.description);\n        form.append('img_series', image);\n\n        const url_link = Server_link +  'series/';\n\n        return axios.post(url_link, form, {\n            headers:{\n                'Content-Type':'multipart/form-data',\n                'Authorization':`Token ${token}`,\n                'Accept':'application/json',\n            }\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}