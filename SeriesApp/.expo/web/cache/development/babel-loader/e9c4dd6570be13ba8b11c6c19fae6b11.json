{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nvar initialState = {\n  username: \"\",\n  password: \"\",\n  confirm_password: \"\",\n  email: \"\",\n  token: null,\n  new_app: null\n};\nexport var reducersPayload = createSlice({\n  name: 'reducers',\n  initialState: initialState,\n  reducers: {\n    OnchangeUsername: function OnchangeUsername(state, action) {\n      state.username = action.payload;\n    },\n    OnchangePassword: function OnchangePassword(state, action) {\n      state.password = action.payload;\n    },\n    OnchangeConfirmPassword: function OnchangeConfirmPassword(state, action) {\n      state.confirm_password = action.payload;\n    },\n    OnchangeEmail: function OnchangeEmail(state, action) {\n      state.email = action.payload;\n    },\n    TokenSet: function TokenSet(state, action) {\n      state.token = action.payload;\n    },\n    NewAppSet: function NewAppSet(state, action) {\n      state.new_app = action.payload;\n    },\n    reset: function reset() {\n      return initialState;\n    }\n  }\n});\nvar _reducersPayload$acti = reducersPayload.actions,\n    OnchangeUsername = _reducersPayload$acti.OnchangeUsername,\n    OnchangePassword = _reducersPayload$acti.OnchangePassword,\n    OnchangeConfirmPassword = _reducersPayload$acti.OnchangeConfirmPassword,\n    OnchangeEmail = _reducersPayload$acti.OnchangeEmail,\n    TokenSet = _reducersPayload$acti.TokenSet,\n    NewAppSet = _reducersPayload$acti.NewAppSet,\n    reset = _reducersPayload$acti.reset;\nexport { OnchangeUsername, OnchangePassword, OnchangeConfirmPassword, OnchangeEmail, TokenSet, NewAppSet, reset };\nexport default reducersPayload.reducer;","map":{"version":3,"sources":["/home/lusk/Documents/projetos/Series App/SeriesApp/src/store/counterslice.js"],"names":["createSlice","initialState","username","password","confirm_password","email","token","new_app","reducersPayload","name","reducers","OnchangeUsername","state","action","payload","OnchangePassword","OnchangeConfirmPassword","OnchangeEmail","TokenSet","NewAppSet","reset","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,EADS;AAEnBC,EAAAA,QAAQ,EAAC,EAFU;AAGnBC,EAAAA,gBAAgB,EAAC,EAHE;AAInBC,EAAAA,KAAK,EAAC,EAJa;AAKnBC,EAAAA,KAAK,EAAC,IALa;AAMnBC,EAAAA,OAAO,EAAC;AANW,CAArB;AASA,OAAO,IAAMC,eAAe,GAAGR,WAAW,CAAC;AACvCS,EAAAA,IAAI,EAAE,UADiC;AAEvCR,EAAAA,YAAY,EAAZA,YAFuC;AAGvCS,EAAAA,QAAQ,EAAE;AACRC,IAAAA,gBAAgB,EAAE,0BAACC,KAAD,EAAQC,MAAR,EAAmB;AACnCD,MAAAA,KAAK,CAACV,QAAN,GAAiBW,MAAM,CAACC,OAAxB;AACD,KAHO;AAIRC,IAAAA,gBAAgB,EAAE,0BAACH,KAAD,EAAQC,MAAR,EAAmB;AACnCD,MAAAA,KAAK,CAACT,QAAN,GAAiBU,MAAM,CAACC,OAAxB;AACD,KANO;AAORE,IAAAA,uBAAuB,EAAE,iCAACJ,KAAD,EAAQC,MAAR,EAAmB;AAC1CD,MAAAA,KAAK,CAACR,gBAAN,GAAyBS,MAAM,CAACC,OAAhC;AACD,KATO;AAURG,IAAAA,aAAa,EAAE,uBAACL,KAAD,EAAQC,MAAR,EAAmB;AAChCD,MAAAA,KAAK,CAACP,KAAN,GAAcQ,MAAM,CAACC,OAArB;AACD,KAZO;AAaRI,IAAAA,QAAQ,EAAE,kBAACN,KAAD,EAAQC,MAAR,EAAmB;AAC3BD,MAAAA,KAAK,CAACN,KAAN,GAAcO,MAAM,CAACC,OAArB;AACD,KAfO;AAgBRK,IAAAA,SAAS,EAAE,mBAACP,KAAD,EAAQC,MAAR,EAAmB;AAC5BD,MAAAA,KAAK,CAACL,OAAN,GAAgBM,MAAM,CAACC,OAAvB;AACD,KAlBO;AAmBRM,IAAAA,KAAK,EAAE;AAAA,aAAMnB,YAAN;AAAA;AAnBC;AAH6B,CAAD,CAAnC;AA2BA,4BAAmHO,eAAe,CAACa,OAAnI;AAAA,IAAQV,gBAAR,yBAAQA,gBAAR;AAAA,IAA0BI,gBAA1B,yBAA0BA,gBAA1B;AAAA,IAA4CC,uBAA5C,yBAA4CA,uBAA5C;AAAA,IAAqEC,aAArE,yBAAqEA,aAArE;AAAA,IAAoFC,QAApF,yBAAoFA,QAApF;AAAA,IAA8FC,SAA9F,yBAA8FA,SAA9F;AAAA,IAAyGC,KAAzG,yBAAyGA,KAAzG;;AAEP,eAAeZ,eAAe,CAACc,OAA/B","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  username: \"\",\n  password:\"\",\n  confirm_password:\"\",\n  email:\"\",\n  token:null,\n  new_app:null\n}\n\nexport const reducersPayload = createSlice({\n    name: 'reducers',\n    initialState,\n    reducers: {\n      OnchangeUsername: (state, action) => {\n        state.username = action.payload;\n      },\n      OnchangePassword: (state, action) => {\n        state.password = action.payload;\n      },\n      OnchangeConfirmPassword: (state, action) => {\n        state.confirm_password = action.payload;\n      },\n      OnchangeEmail: (state, action) => {\n        state.email = action.payload;\n      },\n      TokenSet: (state, action) => {\n        state.token = action.payload;\n      },\n      NewAppSet: (state, action) => {\n        state.new_app = action.payload;\n      },\n      reset: () => initialState\n    },\n})\n\n// Action creators are generated for each case reducer function\nexport const { OnchangeUsername, OnchangePassword, OnchangeConfirmPassword, OnchangeEmail, TokenSet, NewAppSet, reset } = reducersPayload.actions;\n\nexport default reducersPayload.reducer;\n"]},"metadata":{},"sourceType":"module"}