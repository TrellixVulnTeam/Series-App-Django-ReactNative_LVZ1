{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/lusk/Documents/projetos/Series App/SeriesApp/src/pages/RegisterPage.js\";\n\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\nimport RegisterHeader from \"../components/Headers/RegisterHeader\";\nimport FormRegister from \"../components/Forms/FormRegister\";\nimport ButtonRegister from \"../components/Buttons/ButtonRegister\";\nimport { useSelector } from 'react-redux';\nimport Message_errors from \"../utils/Message_errors\";\nimport Validators from \"../utils/Validators\";\nimport APIServices from \"../APIServices/APIServices\";\nimport Colors_services from \"../utils/Colors_layout\";\nimport Warning from \"../components/utils/Warning\";\n\nvar RegisterPage = function RegisterPage(props) {\n  var navigation = props.navigation;\n  var username = useSelector(function (state) {\n    return state.login_reducer.username;\n  });\n  var password = useSelector(function (state) {\n    return state.login_reducer.password;\n  });\n  var email = useSelector(function (state) {\n    return state.login_reducer.email;\n  });\n  var confirm_password = useSelector(function (state) {\n    return state.login_reducer.confirm_password;\n  });\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      error_message = _useState4[0],\n      setMessage = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var Redirect_user = function Redirect_user() {\n    navigation.navigate(\"Login\");\n  };\n\n  var Post_user = function Post_user() {\n    setLoading(true);\n    var obj_user = {\n      username: username.payload,\n      email: email.payload,\n      password: password.payload\n    };\n    APIServices.SingupUser(obj_user).then(function (response) {\n      setLoading(false);\n      setError(false);\n      Alert.alert('Success', 'User account was created with success [Press Ok to Login]', [{\n        text: \"Ok\",\n        onPress: function onPress() {\n          Redirect_user();\n        }\n      }]);\n    }).catch(function (error) {\n      setLoading(false);\n      setError(true);\n      Alert.alert(\"error\", \"The app server side didn't send messages [Are you sure the API is working?]\", {\n        text: \"Ok\",\n        onPress: function onPress() {}\n      });\n    });\n  };\n\n  var Handler_changes = function Handler_changes() {\n    if (Validators.Validate_nonEmptyInputList([username.payload, password.payload, confirm_password.payload, email.payload])) {\n      if (Validators.Validate_EmailInput(email.payload)) {\n        if (Validators.Validate_MatchingPasswordInput(password.payload, confirm_password.payload)) {\n          Post_user();\n        } else {\n          setError(true);\n          setMessage(Message_errors.NotMatchingPasswordError());\n        }\n      } else {\n        setError(true);\n        setMessage(Message_errors.NotaEmailType());\n      }\n    } else {\n      setError(true);\n      setMessage(Message_errors.InputIsEmpty());\n    }\n  };\n\n  return React.createElement(KeyboardAwareScrollView, {\n    keyboardShouldPersistTaps: 'always',\n    contentContainerStyle: style.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, React.createElement(RegisterHeader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }), React.createElement(FormRegister, {\n    error: error,\n    error_message: error_message,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }), loading ? React.createElement(View, {\n    style: style.activityIndicatorStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 29\n    }\n  }, React.createElement(ActivityIndicator, {\n    size: \"large\",\n    color: Colors_services.Get_ColorsPack()[\"Roxo_escuro\"],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 72\n    }\n  })) : React.createElement(ButtonRegister, {\n    navigation: navigation,\n    Handler_changes: Handler_changes,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 19\n    }\n  }));\n};\n\nvar style = StyleSheet.create({\n  container: {\n    padding: 20,\n    backgroundColor: 'white',\n    flexShrink: 0,\n    flexGrow: 1\n  },\n  activityIndicatorStyle: {\n    flex: 1.5,\n    justifyContent: 'center'\n  }\n});\nexport default RegisterPage;","map":{"version":3,"sources":["/home/lusk/Documents/projetos/Series App/SeriesApp/src/pages/RegisterPage.js"],"names":["React","useState","KeyboardAwareScrollView","RegisterHeader","FormRegister","ButtonRegister","useSelector","Message_errors","Validators","APIServices","Colors_services","Warning","RegisterPage","props","navigation","username","state","login_reducer","password","email","confirm_password","error","setError","error_message","setMessage","loading","setLoading","Redirect_user","navigate","Post_user","obj_user","payload","SingupUser","then","response","Alert","alert","text","onPress","catch","Handler_changes","Validate_nonEmptyInputList","Validate_EmailInput","Validate_MatchingPasswordInput","NotMatchingPasswordError","NotaEmailType","InputIsEmpty","style","container","activityIndicatorStyle","Get_ColorsPack","StyleSheet","create","padding","backgroundColor","flexShrink","flexGrow","flex","justifyContent"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { View, Text, StyleSheet, ScrollView, SafeAreaView, Alert, ActivityIndicator } from 'react-native';\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\nimport RegisterHeader from '../components/Headers/RegisterHeader';\nimport FormRegister from '../components/Forms/FormRegister';\nimport ButtonRegister from '../components/Buttons/ButtonRegister';\n\nimport { useSelector } from 'react-redux';\n\nimport Message_errors from '../utils/Message_errors';\nimport Validators from '../utils/Validators';\n\nimport APIServices from '../APIServices/APIServices';\nimport Colors_services from '../utils/Colors_layout';\nimport Warning from '../components/utils/Warning';\n\nconst RegisterPage = (props) => {\n    const { navigation } = props;\n\n    const username = useSelector((state) => state.login_reducer.username);\n    const password = useSelector((state) => state.login_reducer.password);\n    const email = useSelector((state) => state.login_reducer.email);\n    const confirm_password = useSelector((state) => state.login_reducer.confirm_password);\n\n    const [ error, setError ] = useState(false);\n    const [ error_message, setMessage ] = useState(\"\");\n\n    const [ loading, setLoading ] = useState(false);\n\n    const Redirect_user = () => {\n        navigation.navigate(\"Login\");\n    }\n\n    const Post_user = () => {\n        setLoading(true);\n\n        const obj_user = {\n            username: username.payload,\n            email: email.payload,\n            password: password.payload\n        }\n\n        APIServices.SingupUser(obj_user)\n        .then(response => {\n            setLoading(false); setError(false);\n            Alert.alert(\n                'Success',\n                'User account was created with success [Press Ok to Login]',\n                [\n                 {\n                    text:\"Ok\",\n                    onPress: () => {Redirect_user()}\n                 }\n                ]\n            );\n        })\n        .catch(error => {\n            setLoading(false); setError(true);\n            Alert.alert(\n                \"error\",\n                \"The app server side didn't send messages [Are you sure the API is working?]\",\n                {\n                    text:\"Ok\",\n                    onPress: () => {}\n                }\n            );\n        })\n    }\n\n    const Handler_changes = () => {\n        if ( Validators.Validate_nonEmptyInputList([username.payload, password.payload, confirm_password.payload, email.payload]) ){\n            if ( Validators.Validate_EmailInput(email.payload) ){\n                if ( Validators.Validate_MatchingPasswordInput(password.payload, confirm_password.payload) ){\n                    Post_user();\n                }\n                else{\n                    setError(true); setMessage(Message_errors.NotMatchingPasswordError());\n                }\n            }\n            else{\n                setError(true); setMessage(Message_errors.NotaEmailType());\n            }\n        }\n        else{  \n            setError(true); setMessage(Message_errors.InputIsEmpty());\n        }\n    }\n\n    return (\n            <KeyboardAwareScrollView keyboardShouldPersistTaps={'always'}\n                contentContainerStyle={style.container}>\n                <RegisterHeader />\n                <FormRegister error={error} error_message={error_message} />\n                { loading ? <View style={style.activityIndicatorStyle}><ActivityIndicator size=\"large\" color={Colors_services.Get_ColorsPack()[\"Roxo_escuro\"]}/></View> \n                : <ButtonRegister navigation={navigation} Handler_changes={Handler_changes} />}\n            </KeyboardAwareScrollView>\n    )\n}\n\nconst style = StyleSheet.create({\n    container:{\n        padding: 20,\n        backgroundColor: 'white',\n        flexShrink: 0,\n        flexGrow: 1\n    },\n    activityIndicatorStyle:{\n        flex: 1.5,\n        justifyContent:'center'\n    }\n})\n\nexport default RegisterPage;"]},"metadata":{},"sourceType":"module"}